<?php

use Drupal\Core\Database\Database;
use Drupal\image\Entity\ImageStyle;
use Drupal\node\Entity\NodeType;
use Palasthotel\Grid\Core;
use Palasthotel\Grid\Drupal\Library;

require_once dirname(__FILE__)."/lib/bootstrap.php";

/**
 * @return Library
 */
function grid_get_library(){
  $cache=&drupal_static(__FUNCTION__);
  if(!isset($cache))
  {
    $cache=array();
  }

  if(isset($cache['grid.library']))
  {
    return $cache['grid.library'];
  }

  $library = new Library();
  $cache['grid.library']=$library;

  return $library;

}

/**
 * @return Core
 */
function grid_get_core(){
  return grid_get_library()->core;
}

/**
 * Implements hook_grid_load_classes().
 */
function grid_grid_load_classes() {
  require_once("core/classes/drupal/grid_block_box.php");
  require_once("core/classes/drupal/grid_node_box.php");
  require_once("core/classes/drupal/grid_image_box.php");
  require_once("core/classes/drupal/grid_gallery_box.php");
}

/**
 * Created by PhpStorm.
 * User: enno
 * Date: 14.08.15
 * Time: 16:15
 */

function grid_get_storage()
{
	$core = grid_get_core();

	$storage = $core->storage;

	$config=\Drupal::config("grid.settings");
	$storage->containerstyle=$config->get("default_container_style");

	if($storage->containerstyle=='__NONE__')
		$storage->containerstyle=NULL;
	$storage->slotstyle=$config->get("defualt_slot_style");
	if($storage->slotstyle=='__NONE__')
		$storage->slotstyle=NULL;
	$storage->boxstyle=$config->get("default_box_style");
	if($storage->boxstyle=='__NONE__')
		$storage->boxstyle=NULL;
	$cache['storage']=$storage;
	return $storage;
}

function grid_get_grid_by_nid($nodeid,$langcode=NULL)
{
	if($langcode==NULL)
	{
		$language=\Drupal::languageManager()->getCurrentLanguage(\Drupal\Core\Language\LanguageInterface::TYPE_CONTENT);
		$langcode=$language->getId();
	}
  $db=Database::getConnection();
	$grid_id=$db->select("grid_nodes")
		->fields("grid_nodes",array("grid_id"))
		->condition("nid",$nodeid)
		->condition("langcode",$langcode)
		->execute()->fetchAssoc();
	if($grid_id===FALSE)
	{
		return FALSE;
	}
	else
	{
		return $grid_id['grid_id'];
	}
}

function grid_get_nid_by_gridid($gridid)
{
  $db=Database::getConnection();
	$nid=$db->select("grid_nodes")->fields("grid_nodes",array("nid"))->condition("grid_id",$gridid)->execute()->fetchAssoc();
	if($nid==FALSE)
	{
		return FALSE;
	}
	else
	{
		return $nid['nid'];
	}
}

function grid_get_additional_editor_widgets(){

	$editor_widgets = array("css" => array(), "js" => array());
	\Drupal::moduleHandler()->alter('grid_editor_widgets', $editor_widgets);
	return $editor_widgets;
}

function grid_get_additional_box_editmode_css(){
	$css=\Drupal::moduleHandler()->invokeAll('grid_boxes_editmode_css');
	\Drupal::moduleHandler()->alter('grid_ckeditor_plugins_css', $css);
	if(!is_array($css))
		return array();
	return $css;
}



/**
 * Implements hook_library_info_build().
 */
function grid_library_info_build()
{
	$libs=array();
	$language=\Drupal::languageManager()->getCurrentLanguage();

	$editor = grid_get_library()->editor;

	$js=array();
	$css=array();
	/**
	 * get additional field types
	 */
	$editor_widgets = grid_get_additional_editor_widgets();

	/**
	 * add editor js files
	 */
	$jsfiles= $editor->getEditorJS($language->getId(),FALSE);
  $js['/'.drupal_get_path('module','grid')."/lib/js/jquery-ui-1.12.1/jquery-ui.min.js"] = array('preprocess'=>false);
  $js["/grid/ckeditor_config.js"] = array('preprocess'=>false);
	foreach($jsfiles as $idx=>$file)
	{
		$js['/'.drupal_get_path('module','grid')."/lib/grid/".$file]=array('preprocess'=>false);
	}
	foreach( $editor_widgets["js"] as $idx=>$file )
	{
		$js['/'.ltrim($file)]=array('preproces'=>false);
	}

	$base=drupal_get_path('module','grid');

	$cssfiles=$editor->getEditorCSS($language->getDirection(),FALSE);
	foreach($cssfiles as $idx=>$file)
	{
		$css['/'.drupal_get_path("module","grid")."/lib/grid/".$file]=array();
	}
	foreach($editor_widgets["css"] as $idx=>$file)
	{
		$css['/'.$file]=array();
	}
	$box_editmode_css=grid_get_additional_box_editmode_css();
	foreach($box_editmode_css as $idx=>$file)
	{
		$css['/'.$file]=array();
	}
	$css['/'.$base."/grid-drupal.css"]=array();
	$css['/grid/container_slot.css?variant=table'] = array();
	$libs['editor']=array(
		'title'=>'Grid Editor Assets',
		'website'=>'http://www.palasthotel.de',
		'version'=>'1.0',
		'js'=> $js,
		'css'=>array('base'=>$css),
		'dependencies'=>array(
		  'core/jquery',
    ),
	);

	//reuse editors
	$editor_css=$editor->getContainerEditor()->getCSS();
	$editor_js= $editor->getContainerEditor()->getJS();
	$css=array();
	$js=array();
  $js['/'.drupal_get_path('module','grid')."/lib/js/jquery-ui-1.12.1/jquery-ui.min.js"] = array('preprocess'=>false);
  $js["/grid/ckeditor_config.js"] = array('preprocess'=>false);

	foreach($editor_css as $idx=>$file)
	{
		$css['/'.drupal_get_path('module','grid').'/lib/grid/'.$file]=array();
	}
	foreach($editor_js as $idx=>$file)
	{
		// TODO: remove cleanly
		if(strpos($file,"jquery-1.8.3")!== false) continue;
		$js['/'.drupal_get_path('module','grid').'/lib/grid/'.$file]=array();
	}
	$libs['editor.container']=array(
		'title'=>'Grid ContainerFactory Assets',
		'website'=>'http://www.palasthotel.de',
		'version'=>'1.0',
		'js'=>$js,
		'css'=>array('base'=>$css),
		'dependencies'=>array('core/jquery'),
	);

	$editor_css=$editor->getReuseBoxEditor()->getCSS();
	$editor_js= $editor->getReuseBoxEditor()->getJS();
	$css=array();
	$js=array();
  $js['/'.drupal_get_path('module','grid')."/lib/js/jquery-ui-1.12.1/jquery-ui.min.js"] = array('preprocess'=>false);
  $js["/grid/ckeditor_config.js"] = array('preprocess'=>false);
	foreach($editor_css as $idx=>$file)
	{
		$css['/'.drupal_get_path('module','grid').'/lib/grid/'.$file]=array();
	}
	foreach($editor_js as $idx=>$file)
	{
		// TODO: remove cleanly
		if(strpos($file,"jquery-1.8.3")!== false) continue;
		$js['/'.drupal_get_path('module','grid').'/lib/grid/'.$file]=array();
	}
  $css['/grid/container_slot.css?variant=table'] = array();
	$libs['editor.reusableboxes']=array(
		'title'=>'Grid reusable boxes editor assets',
		'website'=>'http://www.palasthotel.de',
		'version'=>'1.0',
		'js'=>$js,
		'css'=>array('base'=>$css),
		'dependencies'=>array('core/jquery'),
	);

	$editor_css=$editor->getReuseContainerEditor()->getCSS();
	$editor_js= $editor->getReuseContainerEditor()->getJS();
	$css=array();
	$js=array();
  $js['/'.drupal_get_path('module','grid')."/lib/js/jquery-ui-1.12.1/jquery-ui.min.js"] = array('preprocess'=>false);
  $js["/grid/ckeditor_config.js"] = array('preprocess'=>false);
	foreach($editor_css as $idx=>$file)
	{
		$css['/'.drupal_get_path('module','grid').'/lib/grid/'.$file]=array();
	}
	foreach($editor_js as $idx=>$file)
	{
		// TODO: remove cleanly
		if(strpos($file,"jquery-1.8.3")!== false) continue;
		$js['/'.drupal_get_path('module','grid').'/lib/grid/'.$file]=array();
	}

	$libs['editor.reusablecontainer']=array(
		'title'=>'Grid reusable container editor assets',
		'website'=>'http://www.palasthotel.de',
		'version'=>'1.0',
		'js'=>$js,
		'css'=>array('base'=>$css),
		'dependencies'=>array('core/jquery'),
	);

	$url="/grid/container_slot.css?variant=table";
	$libs['frontend.css']=array(
		'title'=>'Grid frontend default css',
		'website'=>'http://www.palasthotel.de',
		'version'=>'1.0',
		'js'=>array(),
		'css'=>array('base'=>array($url=>array())),
		'dependencies'=>array(),
	);

	return $libs;
}

function grid_entity_extra_field_info()
{
	$array=array();
	$array['node']=array();
	$types=NodeType::loadMultiple();
	$keys=array_keys($types);
	foreach($keys as $nodetype)
	{
		if(in_array($nodetype,\Drupal::config("grid.settings")->get("enabled_node_types")))
		{
			$array['node'][$nodetype]['display']['grid']=array(
				'label'=>t("Grid"),
				'weight'=>1,
				'description'=>t("Renders the Grid associated to a node")
			);
		}
	}
	return $array;
}

function grid_node_delete($node)
{
  /** @var \Drupal\node\Entity\Node $node */
  $languages = $node->getTranslationLanguages();
  $storage=grid_get_storage();
  foreach($languages as $language) {
    $language_id=$language->getId();
    $grid_id=grid_get_grid_by_nid($node->id(),$language_id);
    if($grid_id!==FALSE) {
      $storage->destroyGrid($grid_id);
    }
  }
  \Drupal::database()->delete('grid_nodes')->condition('nid',$node->id())->execute();
}

function grid_node_load($nodes)
{
	$storage=NULL;
	foreach($nodes as $nid=>$node)
	{
    $grids=array();
    /** @var \Drupal\node\Entity\Node $node*/
    foreach($node->getTranslationLanguages() as $translationLanguage) {
      /** @var \Drupal\Core\Language\LanguageInterface $translationLanguage*/
      $grid_id=grid_get_grid_by_nid($nid,$translationLanguage->getId());
      if($grid_id !== FALSE) {
        $grid=grid_get_library()->api->loadGrid($grid_id, false);
        $grids[$translationLanguage->getId()] = $grid;
      }
    }
    $node->grids=$grids;
	}
}

function grid_node_view(array &$data, $entity, $display, $view_mode)
{
	if(isset($entity->grids[$entity->language()->getId()]) && $view_mode=="full")
	{

    $html=$entity->grids[$entity->language()->getId()]->render(FALSE);
		$data['grid']=array(
			'#attached'=>array(
				'library'=>array(),
			),
			'#type'=>'markup',
			'#markup'=>new \Drupal\grid\Components\GridSafeString($html),
		);
		if(\Drupal::config("grid.settings")->get('use_grid_css'))
		{
			$data['grid']['#attached']['library'][]='grid/frontend.css';
		}
	}
}

function grid_viewmodes()
{
	$results=array();
  /** @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface $view_repo */
  $view_repo=\Drupal::service('entity_display.repository');
  $view_modes=$view_repo->getViewModes("node");
	foreach($view_modes as $key=>$viewmode)
	{
		if(in_array($key,\Drupal::config("grid.settings")->get("viewmodes")))
		{
			$results[$key]=$viewmode;
		}
	}
	return $results;
}

function grid_default_viewmode()
{
	return \Drupal::config("grid.settings")->get("default_viewmode");
}

function grid_image_styles()
{
	$results=array();
	$image_styles=ImageStyle::loadMultiple();
	$enabled=\Drupal::config("grid.settings")->get("imagestyles");
	foreach($image_styles as $key=>$style)
	{
		if(in_array($key,$enabled))
		{
			$results[$key]=$style;
		}
	}
	return $results;
}

function grid_theme() {
	return array(
		'grid_preview'=> array(
			'render element'=>'element'
		)
	);
}
