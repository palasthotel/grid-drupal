<?php 
require_once("./sites/all/libraries/grid/grid.php");
global $grid_lib;
$grid_lib=new grid_library();

//drupal-specific boxes
require_once("core/classes/drupal/grid_sidebar_box.php");
require_once("core/classes/drupal/grid_block_box.php");
require_once("core/classes/drupal/grid_node_box.php");
require_once("core/classes/drupal/grid_image_box.php");

class grid_drupal_ajaxendpoint extends grid_ajaxendpoint
{
	public function Rights()
	{
		$rights=parent::Rights();
		$results=array();
		foreach($rights as $right)
		{
			if(user_access("grid: ".$right))
			{
				$results[]=$right;
			}
		}
		return $results;
	}
	
	public function loadGrid($gridid)
	{
		$return=parent::loadGrid($gridid);
		$nid=grid_get_nid_by_gridid($gridid);
		if(is_numeric($nid))
		{
			$node=node_load($nid);
			$type=$node->type;
			if($type==variable_get('grid_sidebar','sidebars_disabled_i_just_have_to_ensure_no_nodetype_is_called_like_this_lets_hope_no_one_is_ever_that_crazy'))
			{
				$return['isSidebar']=TRUE;
			}
			else
			{
				$return['isSidebar']=FALSE;
			}
		}
		return $return;
	}
	
	public function publishDraft($gridid)
	{
		$result=parent::publishDraft($gridid);
		if($result)
		{
			$nid=grid_get_nid_by_gridid($gridid);
			entity_get_controller('node')->resetCache(array($nid));
			cache_clear_all();
			module_invoke_all('grid_published',grid_get_nid_by_gridid($gridid));
		}
		return $result;
	}
}

function grid_preprocess_html(&$vars) {
 	$vars['classes_array'][] ="node-with-grid";
}

function grid_permission() {
	$storage=grid_get_storage();
	$rights=$storage->ajaxEndpoint->Rights();
	$results=array();
	foreach($rights as $right)
	{
		$results["grid: ".$right]=array(
			'title'=>"grid: ".$right,
		);
	}
	$results["administer grid"]=array(
		'title'=>'administer grid',
	);
	return $results;
}

function grid_menu() {
	return array(
		'node/%node/grid' => array(
			'title'=>'Grid',
			'page callback'=>'grid_grid',
			'access arguments'=>array(1,'administer grid'),
			'access callback'=>'grid_access',
			'type'=>MENU_LOCAL_TASK,
			'context'=>MENU_CONTEXT_PAGE|MENU_CONTEXT_INLINE,
			'page arguments'=>array(1),
		),
		'grid/ckeditor_config.js' =>array(
			'title'=>t('Grid CKEditor Config JS File'),
			'page callback'=>'grid_ckeditor_config',
			'access callback'=>'user_access',
			'access arguments'=>array('administer grid'),
			'type'=>MENU_CALLBACK,
		),
		'grid/container_slot.css' =>array(
			'title'=>t('Grid CSS for Container and Slot dimensions'),
			'page callback'=>'grid_container_slot_css',
			'access callback'=>'user_access',
			'access arguments'=>array('administer grid'),
			'type'=>MENU_CALLBACK,
		),
		'node/%node/grid/preview' =>array(
			'title'=>t('Preview'),
			'page callback'=>'grid_preview',
			'access arguments'=>array(1,'administer grid'),
			'access callback'=>'grid_access',
			'type'=>MENU_CALLBACK,
			'page arguments'=>array(1),
		),
		'node/%node/grid/%/preview' =>array(
			'title'=>t('Preview revision'),
			'page callback'=>'grid_preview_revision',
			'access arguments'=>array(1,'administer grid'),
			'access callback'=>'grid_access',
			'type'=>MENU_CALLBACK,
			'page arguments'=>array(1,3),
		),
		'admin/config/grid'=>array(
			'title'=>'Grid',
			'description'=>'Configure Grid',
			'page callback' => 'system_admin_menu_block_page',
		   'file' => 'system.admin.inc',
		   'file path' => drupal_get_path('module', 'system'),
			'access arguments'=>array('administer grid'),
			'type'=>MENU_NORMAL_ITEM,
		),
		'admin/config/grid/settings'=>array(
			'title'=>'Grid settings',
			'description'=>'Configure Grid',
			'page callback'=>'drupal_get_form',
			'page arguments'=>array('grid_admin_settings'),
			'access arguments'=>array('administer grid'),
			'type'=>MENU_NORMAL_ITEM,
		),
		'admin/config/grid/containerfactory'=>array(
			'title'=>'Container Factory',
			'description'=>'Creates new Containers',
			'page callback'=>'grid_container_editor',
			'access arguments'=>array('administer grid'),
			'type'=>MENU_NORMAL_ITEM,
		),
		'admin/config/grid/boxes'=>array(
			'title'=>t('Reusable Boxes'),
			'description'=>'Manage reusable boxes',
			'page callback'=>'grid_reuse_boxes',
			'access arguments'=>array('administer grid'),
			'type'=>MENU_NORMAL_ITEM,
		),
		'admin/config/grid/boxes/%'=>array(
			'title'=>t('Edit Box'),
			'description'=>'Edit reusable box',
			'page callback'=>'grid_reuse_box_edit',
			'page arguments'=>array(4),
			'type'=>MENU_CALLBACK,
			'access arguments'=>array('administer grid'),
		),
		'admin/config/grid/boxes/%/preview'=>array(
			'title'=>t('Box Preview'),
			'description'=>t('Previews a box'),
			'page callback'=>'grid_reuse_box_preview',
			'page arguments'=>array(4),
			'type'=>MENU_CALLBACK,
			'access arguments'=>array('administer grid'),
		),
		'admin/config/grid/boxes/%/delete'=>array(
			'title'=>t('Delete Box'),
			'description'=>'Deletes a reusable box',
			'page callback'=>'grid_reuse_box_delete',
			'page arguments'=>array(4),
			'type'=>MENU_CALLBACK,
			'access arguments'=>array('administer grid'),
		),
		'admin/config/grid/container'=>array(
			'title'=>t('Reusable Container'),
			'description'=>t('Manage reusable container'),
			'page callback'=>'grid_reuse_container',
			'access arguments'=>array('administer grid'),
			'type'=>MENU_NORMAL_ITEM,
		),
		'admin/config/grid/container/%/delete'=>array(
			'title'=>t('Delete Container'),
			'description'=>t('Deletes a reusable container'),
			'page callback'=>'grid_reuse_container_delete',
			'page arguments'=>array(4),
			'access arguments'=>array('administer grid'),
			'type'=>MENU_CALLBACK,
		),
		'admin/config/grid/container/%'=>array(
			'title'=>t('Edit Container'),
			'description'=>t('Edits a reusable container'),
			'page callback'=>'grid_reuse_container_edit',
			'page arguments'=>array(4),
			'access arguments'=>array('administer grid'),
			'type'=>MENU_CALLBACK,
		),
		'admin/config/grid/container/%/preview'=>array(
			'title'=>t('Container Preview'),
			'description'=>t('Previews a reusable container'),
			'page callback'=>'grid_reuse_container_preview',
			'page arguments'=>array(4),
			'access arguments'=>array('administer grid'),
			'type'=>MENU_CALLBACK,
		),
		'admin/config/grid/styles'=>array(
			'title'=>t('Styles'),
			'description'=>t('Manages container, slot and box styles'),
			'page callback'=>'grid_manage_styles',
			'access arguments'=>array('administer grid'),
			'type'=>MENU_NORMAL_ITEM,
		),
		'grid_ajax_endpoint'=>array(
			'title'=>'Grid AJAX Endpoint',
			'page callback'=>'grid_ajax',
			'access callback'=>TRUE,//TODO
			'type'=>MENU_CALLBACK,
		),
		'grid_file_endpoint'=>array(
			'title'=>'Grid file upload Endpoint',
			'page callback'=>'grid_fileupload',
			'access callback'=>TRUE,
			'type'=>MENU_CALLBACK,
		),
	);
}

function grid_js_alter(&$javascript)
{
	$item=menu_get_item();
	if($item['page_callback']=='grid_grid' || $item['page_callback']=='grid_reuse_box_edit' || $item['page_callback']=='grid_reuse_container_edit')
	{
		global $grid_lib;
		$js_files=$grid_lib->getEditorJS("en",FALSE);
		$javascript['misc/jquery.js']['data']="sites/all/libraries/grid/".$js_files[0];//this is the jquery file.
		unset($javascript['misc/ui/jquery.ui.core.min.js']);
		unset($javascript['misc/ui/jquery.ui.draggable.min.js']);
		unset($javascript['misc/ui/jquery.ui.droppable.min.js']);
		unset($javascript['misc/ui/jquery.ui.mouse.min.js']);
		unset($javascript['misc/ui/jquery.ui.sortable.min.js']);
		unset($javascript['misc/ui/jquery.ui.widget.min.js']);
	}
}

function grid_admin_paths() 
{
	return array(
		'node/*/grid'=>TRUE,
		'admin/config/grid/boxes'=>TRUE,
		'admin/config/grid/boxes/*'=>TRUE,
	);
}

function grid_theme()
{
	return array(
		'grid_editor' => array(
			'variables' => array('ckeditor_path'=>array()),
			'template' => 'core/templates/editor.html',
		),
	);

}

function grid_ckeditor_config()
{
	$styles=array();
	$formats=array();
	$formats_input=module_invoke_all("grid_formats");
	$styles_input=module_invoke_all("grid_styles");
	foreach($formats_input as $format)
	{
		if(!in_array($format, $formats))
		{
			$formats[]=$format;
		}
	}
	$styles=$styles_input;
	global $grid_lib;
	echo $grid_lib->getCKEditorConfig($styles,$formats);
}

function grid_container_slot_css(){
	global $grid_lib;
	echo $grid_lib->getContainerSlotCSS(db_query("SELECT * FROM {grid_container_type}"));
}

function grid_access($node,$right)
{
	$type=$node->type;
	$enabled=variable_get("grid_".$type."_enabled",0);
	if($enabled==0)return FALSE;
	return user_access($right);
}

function grid_get_grid_by_nid($nodeid)
{
	$grid_id=db_select("grid_nodes")->fields("grid_nodes",array("grid_id"))->condition("nid",$nodeid)->execute()->fetchAssoc();
	if($grid_id===FALSE)
	{
		return FALSE;
	}
	else
	{
		return $grid_id['grid_id'];
	}
}

function grid_get_nid_by_gridid($gridid)
{
	$nid=db_select("grid_nodes")->fields("grid_nodes",array("nid"))->condition("grid_id",$gridid)->execute()->fetchAssoc();
	if($nid==FALSE)
	{
		return FALSE;
	}
	else
	{
		return $nid['nid'];
	}
}

function grid_get_storage()
{
	$cache=&drupal_static(__FUNCTION__);
	if(!isset($cache))
	{
		$cache=array();
	}
	if(!isset($cache['loaded']))
	{
		module_invoke_all('grid_load_classes');
		$cache['loaded']=TRUE;
	}
	if(isset($cache['storage']))
	{
		return $cache['storage'];
	}
	$conn=Database::getConnection();
	$opts=$conn->getConnectionOptions();
	global $user;
	$username="UNDEFINED";
	if(isset($user->name))
		$username=$user->name;
	$storage=new grid_db($opts['host'],$opts['username'],$opts['password'],$opts['database'],$username,$conn->tablePrefix());
	global $theme_path;
	$storage->templatesPath=$theme_path.'/grid/';
	$storage->containerstyle=variable_get('grid_container_style','__NONE__');
	if($storage->containerstyle=='__NONE__')
		$storage->containerstyle=NULL;
	$storage->slotstyle=variable_get('grid_slot_style','__NONE__');
	if($storage->slotstyle=='__NONE__')
		$storage->slotstyle=NULL;
	$storage->boxstyle=variable_get('grid_box_style','__NONE__');
	if($storage->boxstyle=='__NONE__')
		$storage->boxstyle=NULL;
	$storage->ajaxEndpoint=new grid_drupal_ajaxendpoint();
	$storage->ajaxEndpoint->storage=$storage;
	$cache['storage']=$storage;
	return $storage;
}

function grid_grid($node) {
	$type=$node->type;
	$enabled=variable_get("grid_".$type."_enabled",0);
	if($enabled==1)
	{
		$grid_id=grid_get_grid_by_nid($node->nid);
		if($grid_id===FALSE)
		{
			return drupal_get_form('grid_build_grid',$node->nid);
		}
		else
		{
			global $language;
			global $grid_lib;

			$jsfiles=$grid_lib->getEditorJS($language->language,FALSE);
			foreach($jsfiles as $idx=>$file)
			{
				drupal_add_js("sites/all/libraries/grid/".$file,'file');
			}
			grid_add_drupal_css();
			$cssfiles=$grid_lib->getEditorCSS($language->direction,FALSE);
			foreach($cssfiles as $idx=>$file)
			{
				drupal_add_css("sites/all/libraries/grid/".$file);
			}
			drupal_add_css( $grid_lib->getContainerSlotCSS(db_query("SELECT * FROM {grid_container_type}")) ,array('type'=>'inline'));
			return $grid_lib->getEditorHTML(
						$grid_id,
						'grid',
						'/grid/ckeditor_config.js',
						url('grid_ajax_endpoint'),
						variable_get("grid_debug_mode",0),
						url('node/'.$node->nid.'/grid/preview'),
						'node/'.$node->nid.'/grid/{REV}/preview');
		}
	}
	else
	{
		drupal_not_found();
	}
}

function grid_preview($node) {

	$type=$node->type;
	$enabled=variable_get("grid_".$type."_enabled",0);
	if($enabled==1)
	{
		$grid_id=grid_get_grid_by_nid($node->nid);
		if($grid_id===FALSE)
		{
			drupal_not_found();
		}
		else
		{
			global $grid_lib;


			// default grid css
			if(variable_get("grid_use_grid_css",1)){
				drupal_add_css($grid_lib->getContainerSlotCSS(db_query("SELECT * FROM {grid_container_type}")),array('type'=>'inline'));
			}
			

			$storage=grid_get_storage();
			global $theme_path;
			$storage->templatesPath=$theme_path.'/grid/';
			$grid=$storage->loadGrid($grid_id);
			return $grid->render(FALSE);
		}
	}
}

function grid_preview_revision($node,$revision)
{
	$type=$node->type;
	$enabled=variable_get("grid_".$type."_enabled",0);
	if($enabled==1)
	{
		$grid_id=grid_get_grid_by_nid($node->nid);
		if($grid_id===FALSE)
		{
			drupal_not_found();
		}
		else
		{
			global $grid_lib;
			// default grid css
			if(variable_get("grid_use_grid_css",1)){
				drupal_add_css($grid_lib->getContainerSlotCSS(db_query("SELECT * FROM {grid_container_type}")),array('type'=>'inline'));
			}

			$storage=grid_get_storage();
			global $theme_path;
			$storage->templatesPath=$theme_path.'/grid/';
			$grid=$storage->loadGridByRevision($grid_id,$revision);
			return $grid->render(FALSE);
		}
	}
}

function grid_node_delete($node)
{
	$grid_id=grid_get_grid_by_nid($node->nid);
	if($grid_id!==FALSE)
	{
		$storage=grid_get_storage();
		$storage->destroyGrid($grid_id);
		db_delete("grid_nodes")->condition("nid",$node->nid)->execute();
	}
}

function grid_node_load($nodes,$types)
{
	$storage=NULL;
	foreach($nodes as $nid=>$node)
	{
		$grid_id=grid_get_grid_by_nid($nid);
		if($grid_id!==FALSE)
		{
			if($storage==NULL)
				$storage=grid_get_storage();
			$grid=$storage->loadGrid($grid_id,FALSE);
			if(!$grid->isDraft)
			{
				$node->grid=$grid;
			}
		}
	}
}

function grid_node_view($node,$view_mode,$langcode)
{
	if(isset($node->grid) && $view_mode=="full")
	{
		global $grid_lib;
		// default grid css
		if(variable_get("grid_use_grid_css",1)){
			drupal_add_css($grid_lib->getContainerSlotCSS(db_query("SELECT * FROM {grid_container_type}")),array('type'=>'inline'));
		}
		
		global $theme_path;
		$storage=$node->grid->storage;
		$storage->templatesPath=$theme_path.'/grid/';
		$html=$node->grid->render(FALSE);
		$node->content['grid']=array(
			'#type'=>'markup',
			'#markup'=>$html,
		);
		
		return $node;
	}
}

function grid_field_extra_fields()
{
	$array=array();
	$array['node']=array();
	$types=node_type_get_types();
	$keys=array_keys($types);
	foreach($keys as $nodetype)
	{
		if(variable_get("grid_".$nodetype."_enabled",0))
		{
			$array['node'][$nodetype]['display']['grid']=array(
				'label'=>t("Grid"),
				'weight'=>1,
				'description'=>t("Renders the Grid associated to a node")
			);
		}
	}
	return $array;
}

function grid_build_grid($form_id,&$form_state,$nid)
{
	$form_state['nid']=$nid;
	
	$node=node_load($nid);
	if(!empty($node->tnid))
	{
		$nodes=translation_node_get_translations($node->tnid);
		
		$form=array();
		$form['question']=array(
			'#type'=>'markup',
			'#markup'=>'<div>'.t('There is no Grid.').'</div>',
		);
		$options=array();
		$options[-1]='Boot new Grid';
		foreach($nodes as $language=>$lnode)
		{
			$localized=node_load($lnode->nid);
			if(isset($localized->grid))
			{
				$options[$lnode->nid]=t('Clone Grid from ').$localized->title.'['.$language.']';
			}
		}
		$form['options']=array(
			'#type'=>'radios',
			'#default_value'=>-1,
			'#options'=>$options
		);
		$form['submit']=array(
			'#type'=>'submit',
			'#value'=>'Create Grid',
			'#executes_submit_callback'=>TRUE,
		);
		return $form;
	}
	else
	{
		$form=array();
		$form['question']=array(
			'#type'=>'markup',
			'#markup'=>'<div>'.t('There is no Grid. Boot one?').'</div>',
		);
		$form['submit']=array(
			'#type'=>'submit',
			'#value'=>'Create Grid',
			'#executes_submit_callback'=>TRUE,
		);
		return $form;
	}
}

function grid_build_grid_submit($form_id,&$form_state)
{
	$node=node_load($form_state['nid']);
	$storage=grid_get_storage();
	if(!empty($node->tnid))
	{
		$clone=$form_state['values']['options'];
		if($clone==-1)
		{
			$id=$storage->createGrid();
			if($node->type==variable_get('grid_sidebar','sidebars_disabled_i_just_have_to_ensure_no_nodetype_is_called_like_this_lets_hope_no_one_is_ever_that_crazy'))
			{
				$grid=$storage->loadGrid($id);
				$grid->insertContainer("SC-4",0);		
			}
			else if(variable_get('grid_default_container','__NONE__')!='__NONE__')
			{
				$grid=$storage->loadGrid($id);
				$grid->insertContainer(variable_get('grid_default_container'),0);
			}
			
			db_insert('grid_nodes')->fields(array('nid','grid_id'))->values(array('nid'=>$form_state['nid'],'grid_id'=>$id))->execute();
		}
		else
		{
			$clonenode=node_load($clone);
			$grid=$clonenode->grid;
			$cloned=$grid->cloneGrid();
			db_insert('grid_nodes')->fields(array('nid','grid_id'))->values(array('nid'=>$node->nid,'grid_id'=>$cloned->gridid))->execute();
		}
	}
	else
	{
		$id=$storage->createGrid();
		if($node->type==variable_get('grid_sidebar','sidebars_disabled_i_just_have_to_ensure_no_nodetype_is_called_like_this_lets_hope_no_one_is_ever_that_crazy'))
		{
			$grid=$storage->loadGrid($id);
			$grid->insertContainer("sc-1d3",0);
		}
		else if(variable_get('grid_default_container','__NONE__')!='__NONE__')
		{
			$grid=$storage->loadGrid($id);
			$grid->insertContainer(variable_get('grid_default_container'),0);
		}
		
		db_insert('grid_nodes')->fields(array('nid','grid_id'))->values(array('nid'=>$form_state['nid'],'grid_id'=>$id))->execute();
	}
}

function grid_ajax()
{
	$storage=grid_get_storage();
	$storage->handleAjaxCall();
}

function grid_fileupload()
{
	$storage=grid_get_storage();
	$result=$storage->handleUpload();
	drupal_json_output(array('result'=>$result));
}

function grid_admin_settings()
{
	$form=array();
	$types=node_type_get_types();
	$keys=array_keys($types);
	
	$form['defaultcontainer']=array(
		'#type'=>'fieldset',
		'#title'=>t('Which Container should be placed on empty grids?'),
	);
	
	$options=array();
	$options['__NONE__']=t('None - leave empty');
	$storage=grid_get_storage();
	$containers=$storage->fetchContainerTypes();
	foreach($containers as $container)
	{
		if(strpos($container['type'],"c-")===0)
		{
			$options[$container['type']]=$container['type'];
		}
	}
	
	$form['defaultcontainer']['grid_default_container']=array(
		'#title'=>t('Default Container'),
		'#type'=>'select',
		'#options'=>$options,
		'#default_value'=>variable_get('grid_default_container','__NONE__'),
	);
	
	$form['defaultstyles']=array(
		'#title'=>t('Set Styles which should be applied to everything by default.'),
		'#type'=>'fieldset',
	);
	
	$storage=grid_get_storage();
	$styles=$storage->fetchContainerStyles();
	$array=array();
	$array['__NONE__']='None';
	foreach($styles as $idx=>$elem)
	{
		$array[$elem['slug']]=$elem['title'];
	}
	$form['defaultstyles']['grid_container_style']=array(
		'#type'=>'select',
		'#title'=>'Container Style',
		'#options'=>$array,
		'#default_value'=>variable_get('grid_container_style','__NONE__'),
	);
	
	$styles=$storage->fetchSlotStyles();
	$array=array();
	$array['__NONE__']='None';
	foreach($styles as $idx=>$elem)
	{
		$array[$elem['slug']]=$elem['title'];
	}
	$form['defaultstyles']['grid_slot_style']=array(
		'#type'=>'select',
		'#title'=>'Slot Style',
		'#options'=>$array,
		'#default_value'=>variable_get('grid_slot_style','__NONE__'),
	);
	
	$styles=$storage->fetchBoxStyles();
	$array=array();
	$array['__NONE__']='None';
	foreach($styles as $idx=>$elem)
	{
		$array[$elem['slug']]=$elem['title'];
	}
	$form['defaultstyles']['grid_box_style']=array(
		'#type'=>'select',
		'#title'=>'Box Style',
		'#options'=>$array,
		'#default_value'=>variable_get('grid_box_style','__NONE__'),
	);
	
	
	$form['nodetypes']=array(
		'#type'=>'fieldset',
		'#title'=>t('Grid support for the following node types'),
	);
	
	foreach($keys as $key)
	{
		$form['nodetypes']['grid_'.$key.'_enabled']=array(
			'#type'=>'checkbox',
			'#default_value'=>variable_get('grid_'.$key.'_enabled',0),
			'#title'=>$key,
		);
	}
	
	$form['sidebar']=array(
		'#type'=>'fieldset',
		'#title'=>t('Content to be used as a sidebar'),
	);
	$options=array();
	$options['sidebars_disabled_i_just_have_to_ensure_no_nodetype_is_called_like_this_lets_hope_no_one_is_ever_that_crazy']='None';
	foreach($keys as $key)
	{
		if(variable_get('grid_'.$key.'_enabled',0))
		{
			$options[$key]=$key;
		}
	}


	$form['sidebar']['grid_sidebar']=array(
		'#type'=>'select',
		'#title'=>'Node Type',
		'#options'=>$options,
		'#default_value'=>variable_get('grid_sidebar','sidebars_disabled_i_just_have_to_ensure_no_nodetype_is_called_like_this_lets_hope_no_one_is_ever_that_crazy')
	);
	
	
	$form['displays']=array(
		'#type'=>'fieldset',
		'#title'=>t('Supported Displays for nodes within grid'),
	);
	$info=entity_get_info('node');
	$view_modes=$info['view modes'];
	foreach($view_modes as $key=>$viewmode)
	{
		$form['displays']["grid_viewmode_$key"]=array(
			'#type'=>'checkbox',
			'#default_value'=>variable_get("grid_viewmode_$key",1),
			'#title'=>$viewmode['label'],
		);
	}
	
	$options=array();
	foreach($view_modes as $key=>$viewmode)
	{
		$options[$key]=$viewmode['label'];
	}
	
	$form['grid_default_viewmode']=array(
		'#type'=>'select',
		'#title'=>'Default View Mode',
		'#options'=>$options,
		'#default_value'=>variable_get('grid_default_viewmode','teaser'),
	);
	
	$form['blocks']=array(
		'#type'=>'fieldset',
		'#title'=>t('Supported Blocks'),
	);
	$blocks=array();
	$results=array();
	foreach(module_implements('block_info') as $module)
	{
		$module_blocks=module_invoke($module,'block_info');
		$blocks[$module]=$module_blocks;
	}
	drupal_alter('block_info',$blocks,$theme_key,$blocks);
	foreach($blocks as $module=>$modblocks)
	{
		foreach($modblocks as $delta=>$block)
		{
			$form['blocks']['grid_block_'.$module.'_'.$delta.'_enabled']=array(
				'#type'=>'checkbox',
				'#default_value'=>variable_get("grid_block_".$module."_".$delta."_enabled",0),
				'#title'=>$block['info'],
			);
		}
	}

	$form['imagestyles']=array(
		'#type'=>'fieldset',
		'#title'=>'Image styles to be used on grids'
	);
	foreach(image_styles() as $key=>$style)
	{
		$form['imagestyles']['grid_imagestyle_'.$key.'_enabled']=array(
			'#type'=>'checkbox',
			'#default_value'=>variable_get('grid_imagestyle_'.$key.'_enabled',1),
			'#title'=>$key
		);
	}

	$form['grid_imagestyles_info']=array(
		'#type'=>'textarea',
		'#title'=>'Info to the imagestyles',
		'#default_value' => variable_get("grid_imagestyles_info"),
	);

	$form['grid_use_grid_css']=array(
		'#type'=>'checkbox',
		'#default_value'=>variable_get("grid_use_grid_css",1),
		'#title'=> t("Use default Grid CSS"),
	);

	$form['grid_debug_mode']=array(
		'#type'=>'checkbox',
		'#default_value'=>variable_get("grid_debug_mode",0),
		'#title'=> t("Debug mode"),
	);
	
	return system_settings_form($form);
}

function grid_image_styles()
{
	$results=array();
	foreach(image_styles() as $key=>$style)
	{
		if(variable_get('grid_imagestyle_'.$key.'_enabled',1))
		{
			$results[$key]=$style;
		}
	}
	return $results;
}

function grid_viewmodes()
{
	$results=array();
	$info=entity_get_info('node');
	$view_modes=$info['view modes'];
	foreach($view_modes as $key=>$info)
	{
		if(variable_get("grid_viewmode_$key",1)==1)
		{
			$results[$key]=$info;
		}
	}
	return $results;
}

function grid_default_viewmode()
{
	return variable_get('grid_default_viewmode','teaser');
}

function grid_manage_styles()
{
	global $grid_lib;
	return $grid_lib->getStyleEditor()->run(grid_get_storage());
}


function grid_reuse_boxes()
{
	$storage=grid_get_storage();
	global $grid_lib;
	$editor=$grid_lib->getReuseBoxEditor();
	grid_prepare_reuse_editor($editor);
	return $editor->run($storage,function($id){
		return url("admin/config/grid/boxes/".$id);
	},function($id){
		return url("admin/config/grid/boxes/".$id."/delete");
	});
}

function grid_reuse_box_edit($boxid)
{
	$storage=grid_get_storage();
	global $grid_lib;
	$editor=$grid_lib->getReuseBoxEditor();
	grid_prepare_reuse_editor($editor);
	return $editor->runEditor($storage,
							  $boxid,
							  "/grid/ckeditor_config.js",
							  url('grid_ajax_endpoint'),
							  variable_get('grid_debug_mode',0),
							  url('admin/config/grid/boxes/'.$boxid.'/preview'));
}

function grid_reuse_box_preview($boxid)
{
	$storage=grid_get_storage();
	$grid=$storage->loadGrid("box:".$boxid);
	return $grid->render(FALSE);
}

function grid_reuse_box_delete($boxid)
{
	$storage=grid_get_storage();
	global $grid_lib;
	$editor=$grid_lib->getReuseBoxEditor();
	grid_prepare_reuse_editor($editor);
	$result=$editor->runDelete($storage,$boxid);
	if($result===TRUE)
	{
		drupal_goto('admin/config/grid/boxes');
	}
	return $result;
}

function grid_reuse_container()
{
	$storage=grid_get_storage();
	global $grid_lib;
	$editor=$grid_lib->getReuseContainerEditor();
	grid_prepare_reuse_editor($editor);
	return $editor->run($storage,function($id){
		return url("admin/config/grid/container/".$id);
	},function($id){
		return url("admin/config/grid/container/".$id."/delete");
	});
}

function grid_prepare_reuse_editor($editor)
{
	$css=$editor->getCSS(FALSE);
	foreach($css as $file)
	{
		drupal_add_css("sites/all/libraries/grid/".$file,array('type'=>'file','group'=>CSS_THEME));
	}
	global $language;
	$js=$editor->getJS($language->language,FALSE);
	foreach($js as $file)
	{
		drupal_add_js("sites/all/libraries/grid/".$file,'file');
	}
}

function grid_reuse_container_delete($containerid)
{
	$storage=grid_get_storage();
	global $grid_lib;
	$editor=$grid_lib->getReuseContainerEditor();
	grid_prepare_reuse_editor($editor);
	$result=$editor->runDelete($storage,$containerid);
	if($result===TRUE)
	{
		drupal_goto('admin/config/grid/container');
	}
	return $result;
}

function grid_reuse_container_edit($containerid)
{
	global $grid_lib;
	$editor=$grid_lib->getReuseContainerEditor();
	grid_prepare_reuse_editor($editor);
	return $editor->runEditor(grid_get_storage(),
							  $containerid,
							  "/grid/ckeditor_config.js",
							  url('grid_ajax_endpoint'),
							  variable_get("grid_debug_mode",0),
							  url('admin/config/grid/container/'.$containerid.'/preview'));
}

function grid_reuse_container_preview($containerid)
{
	$storage=grid_get_storage();
	$grid=$storage->loadGrid("container:".$containerid);
	return $grid->render(FALSE);
}

function grid_add_drupal_css(){
	$base=drupal_get_path('module','grid');
	drupal_add_css($base."/grid-drupal.css",array('type'=>'file','group'=>CSS_THEME));
}

function grid_container_editor()
{
	global $grid_lib;
	$grid_db=grid_get_storage();
	$editor=$grid_lib->getContainerEditor();
	grid_prepare_reuse_editor($editor);
	return $editor->run($grid_db);
}

// function grid_add_css(){
// 	global $grid_lib;
// 	global $language;
// 	$css=$grid_lib->getEditorCSS($language->direction,FALSE);
// 	foreach($css as $idx=>$file)
// 	{
// 		drupal_add_css("sites/all/libraries/grid/".$file,array('type'=>'file','group'=>CSS_THEME));
// 	}
// }

// function grid_add_app_JS(){
// 	global $grid_lib;
// 	global $language;
// 	$scripts=$grid_lib->getEditorJS($language->language,FALSE);
// 	foreach($scripts as $idx=>$script)
// 	{
// 		drupal_add_js("sites/all/libraries/grid/".$script,'file');
// 	}
// }